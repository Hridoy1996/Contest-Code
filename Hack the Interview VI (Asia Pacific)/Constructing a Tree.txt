/*
T M Hridoy KUET CSE 15
*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
#define print cout<<"==================\n";
typedef    long long ll;
typedef pair<ll,ll   > payar;
typedef   unsigned long long ull;
/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/
///set
typedef tree<int,null_type,less<int>,rb_tree_tag,
        tree_order_statistics_node_update> indexed_set;
///multiset
typedef tree<payar,null_type,less<payar>,rb_tree_tag,
        tree_order_statistics_node_update>ordered_set;
///map
template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
ordered_map<int, int> my_map;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define readf                freopen("in.txt", "r", stdin);
#define writef               freopen("out.txt", "w", stdout);
priority_queue<int, vector<int>,  greater<int> > aa,bb,both; ///accending
vector< pair<int,payar  > > vpp;
vector < payar >  vp,vp1;
#define pi acos(-1.0);
#define EPS 1e-9
#define  mod   1000000007
#define  modulo  1000000007
#define all(x)  x.begin(),x.end()
#define un(x)       x.erase(unique(all(x)), x.end())
#define endl "\n"
inline ll bits(ll arg,int posn)
{
    return ((arg) | (1 << (posn)));

}
inline ll bitc(ll arg, int posn)
{
    return ((arg) & ~(1 << (posn)));
}
const int N = 5e5+5;


int main ()
{
     IOS;

    int t ;
    cin>>t;

        vector<ll>com;
        for(ll i = 1 ; i<=20000000 ; i++)
        {
            ll tmp =  (i*(i-1))/2 ;
            com.push_back(tmp);

        }

    while(t--)
    {

        ll n, m ;
        cin>>n>>m;
        ll maxi = (n*(n-1))/2;
        ll mini = n-1;
        if(m>maxi or m<mini)
        {
            cout<<"-1 -1\n";
            continue;
        }
        vector< pair<int,int> > pr;
        ll cover = 1;

        ll in = upper_bound(all(com),m)-com.begin();
again:
        in--;
        ll cost = com[in];
        cover+=in;
        ll rem = n - cover;
        ll kp = m-cost;

        if(kp<rem)
        {
            cover-=in;
            goto again;
        }

        in--;
        ll last ;
        if(m>=cost)
        {
            for(ll j = 1 ; j<=1+in ; j++)
            {
                pr.emplace_back(j,j+1);
                last = j+2;
            }
            m-=cost;
        }

        for(ll i = last ; i<=n-1 ; i++)
        {

            pr.emplace_back(i,1);
            m--;
        }
        if(m)
            pr.emplace_back(n,m);

        //cout<<pr.size()<<endl;
        for(auto it: pr)
               cout<<it.first<<" "<<it.second<<endl;


    }


    return 0;
}
